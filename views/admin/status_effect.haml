%p
	Once you've finished editing statuses, you will need to synchronise active characters in order to apply the changes:
	%a.ui-button.ui-widget.ui-corner-all.ui-button-text-only(href="/admin/sync") Synchronise Status Effects
%p
	EXPECT BUGS - JTable REALLY doesn't support what the effect editor is trying to do, so its fudged together and probably pretty fragile at the moment
%p
	DATATABLES -> JTABLES: JTable sends only the primary key field when deleting and ignores the returned data from server on create/update - This may cause admin UI oddities until workarounds are implemented
%p
	Known Issue: You need to reload child tables after deleting a record within them, otherwise backend will delete/update the wrong records on subsequent changes (TODO: Add event handler to reload table data after a delete action)
%table#status_effects.display(style='width:100%')
	%thead
	%tbody
	%tfoot
:javascript
	$('#status_effects').jtable({
		title: 'Status Effects',
		paging: false,
		sorting: false,
		actions:{
			listAction: '/admin/datasource/status_effect?jtable=true',
			createAction: '/admin/editor/status_type?jtable=true&action=create',
			updateAction: '/admin/editor/status_type?jtable=true&action=edit'
		},
		fields:{
			id: {title: '#', key: true, list:true, create: false, edit: false},
			effects: {
				title: 'Effects',
				width: '5px',
				sorting: false,
				edit: false,
				create: false,
				display: function (statusData) {
					var $button = $('<button class="ui-button ui-widget ui-corner-all ui-button-text-only">Effects</button>');
					//Open child table when user clicks the button
					$button.click(function () {
						$('#status_effects').jtable('openChildTable',
							$button.closest('tr'),
							{
								title: statusData.record.name + ' - Effects',
								actions: {
									listAction: '/admin/datasource/status_effect/' + statusData.record.id + '/effects?jtable=true',
									deleteAction: '/admin/editor/status_effect/' + statusData.record.id + '/effects?jtable=true&action=remove',
									createAction: '/admin/editor/status_effect/' + statusData.record.id + '/effects?jtable=true&action=create',
									updateAction: '/admin/editor/status_effect/' + statusData.record.id + '/effects?jtable=true&action=edit',
								},
								fields: {
									index: {
										key: true,
										list: false
									},
									type:{
										title:'Type',
										type:'combobox',
										options: ['Activated', 'ActivatedTarget', 'AlonaiAegisAbility', 'Ammo', 'Armour', 'AttackHitIncreasesDuration',  'BloodClaws', 'BloodTaste', 'ChargeAttack', 'ClassTier', 'CombinationAttack', 'Component', 'CraftingRecipe', 'CriticalHit', 'CustomText', 'DamageReducesDuration', 'Defence', 'Duration', 'Equippable', 'ExplosiveMurder', 'ExplosiveMurderManualActivation', 'FirstAidKit', 'GrantStatus', 'HandOfZealotry', 'HealingOnTick', 'HolierThanThou', 'IncreaseHealing', 'IncreaseMaxEncumbrance', 'IncreaseMaxHitpoints', 'LimitedUses', 'MoralityRestriction', 'MoralityRestrictionTarget', 'Regen', 'Reloadable', 'RendFlesh', 'SeeHitPoints', 'SeePowerState', 'SendMessage', 'SenseMorality', 'SenseMagic', 'ShieldOfFaith', 'SkillPrerequisite', 'SkillPurchasable', 'Smite', 'TogglePower', 'Weapon', 'WeaponBuff', 'WeaponWithAmmo'],
										defaultValue: 'Regen'
									},
									description: {
										title:'Description',
										edit:false,
										create:false
									},
									select_1: {
										title:'select_1',
										type:'combobox',
										list:false
									},
									text_1: {
										title:'text_1',
										list:false
									},
									select_2: {
										title:'select_2',
										type:'combobox',
										list:false
									},
									text_2: {
										title:'text_2',
										list:false
									},
									select_3: {
										title:'select_3',
										type:'combobox',
										list:false
									},
									text_3: {
										title:'text_3',
										list:false
									},
									select_4: {
										title:'select_5',
										type:'combobox',
										list:false
									},
									text_4: {
										title:'text_4',
										list:false
									},
									select_5: {
										title:'select_5',
										type:'combobox',
										list:false
									},
									text_5: {
										title:'text_5',
										list:false
									},
									text_6: {
										title:'text_6',
										list:false
									},
									text_7: {
										title:'text_7',
										list:false
									}
								},
								formCreated: function(event, data){
									if(data.formType == 'edit')
									{
										setTimeout(function(){emulateDTEDependentFields($('.jtable-dialog-form select[name=type]').val())}, 500);
									}
									else
									{
										emulateDTEDependentFields('Regen');
									}
								}
							} , function (data) { //opened handler
								data.childTable.jtable('load');
							});
					});
					//Return button to show on the main row
					return $button;
				}
			},
			name: {title: 'Name'},
			activation: {title: 'Activation', type:'combobox', options:['standard'], list:false},
			family: {title: 'Type', type:'combobox', options: ['class', 'magical', 'mundane', 'skill'], defaultValue: 'skill'},
			impacts: {width:'50%', title: 'Effects', create: false, edit: false, list: true}
		}
	});

	$(document).on('change', '.jtable-dialog-form select[name=type]', function(){
		emulateDTEDependentFields($(this).val())
	});

	function emulateDTEDependentFields(effect)
	{
		$.getJSON( "/admin/datatable/effect/define?jtable=true&type=" + effect, function( data ) {

			// Emulate dependent fields hiding
			$(data.hide).each(function(_, e){
				$('.jtable-dialog-form .jtable-input-field-container .jtable-input [name=' + e + ']').parent().parent().hide();
			});
			// Emulate dependent fields labels
			$.each(data.labels, function(k, v){
				$('.jtable-dialog-form .jtable-input-field-container .jtable-input [name=' + k + ']').parent().parent().find('.jtable-input-label').html(v);
			});
			// Emulate options
			$.each(data.options, function(k, v){
				// Attempt to fetch the value from the current field if available
				field = $('.jtable-dialog-form .jtable-input-field-container .jtable-input [name=' + k + ']');
				currentValue = field.val();
				// Build select
				select = $('<select id="Edit-' + k + '" name="' + k + '"></select>')
				// DataTables Editor supported a wide range of options list formats, so we need to check if its a hash or array and treat appropriately
				useKey = !(v instanceof Array);
				$(v).each(function(key,optionLabel){
					optionKey = useKey ? key : optionLabel;
					select.append('<option ' + (optionKey == currentValue ? 'selected' : '') + ' value="' + optionKey + '">' + optionLabel + '</option>');
				});
				field.replaceWith(select);
			});
			// Emulate values (not implemented)
			// Emulate dependent fields showing
			$(data.show).each(function(_, e){
				$('.jtable-dialog-form .jtable-input-field-container .jtable-input [name=' + e + ']').parent().parent().show();
			});


		});
	}


	$('#status_effects').jtable('load');